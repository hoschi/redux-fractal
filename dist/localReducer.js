'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStore = undefined;

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _actions = require('./actions.js');

var UIActions = _interopRequireWildcard(_actions);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var stores = {};
var globalActions = {};
var refCounter = {};
var defaultGlobalFilter = function defaultGlobalFilter() {
  return false;
};

var initialiseComponentState = function initialiseComponentState(state, payload, componentKey) {
  var config = payload.config,
      store = payload.store;

  stores[componentKey] = store;
  refCounter[componentKey] = refCounter[componentKey] || 0;
  refCounter[componentKey]++;
  globalActions[componentKey] = config.filterGlobalActions || defaultGlobalFilter;
  var initialState = stores[componentKey].getState();
  var newComponentsState = (0, _assign2.default)({}, state, (0, _defineProperty3.default)({}, componentKey, initialState));
  return newComponentsState;
};
var destroyComponentState = function destroyComponentState(state, payload, componentKey) {
  refCounter[componentKey] = refCounter[componentKey] || 0;
  if (refCounter[componentKey] > 0) {
    refCounter[componentKey]--;
  }
  if (refCounter[componentKey]) {
    return state;
  }
  var newState = (0, _assign2.default)({}, state);
  delete newState[componentKey];
  delete refCounter[componentKey];
  delete stores[componentKey];
  delete globalActions[componentKey];
  return newState;
};
var updateSingleComponent = function updateSingleComponent(oldComponentState, action, componentKey) {
  var store = stores[componentKey];
  if (store) {
    // eslint-disable-next-line
    action.meta = (0, _assign2.default)({}, action.meta, { reduxFractalCurrentComponent: componentKey });
    store.originalDispatch(action);
    return store.getState();
  }
  return oldComponentState;
};

var updateComponentState = function updateComponentState(state, action, componentKey) {
  var newState = (0, _keys2.default)(state).reduce(function (stateAcc, k) {
    var shouldUpdate = componentKey === k || typeof globalActions[k] === 'function' && globalActions[k](action);
    var updatedState = state[k];
    if (shouldUpdate) {
      updatedState = updateSingleComponent(state[k], action, k);
      return (0, _assign2.default)({}, stateAcc, (0, _defineProperty3.default)({}, k, updatedState));
    }
    return stateAcc;
  }, {});
  return (0, _assign2.default)({}, state, newState);
};

exports.default = function () {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments[1];

  var componentKey = action.meta && action.meta.reduxFractalTriggerComponent;
  var nextState = null;
  switch (action.type) {
    case UIActions.CREATE_COMPONENT_STATE:
      return initialiseComponentState(state, action.payload, componentKey);
    case UIActions.DESTROY_COMPONENT_STATE:
      if (!action.payload.persist && stores[componentKey]) {
        return destroyComponentState(state, action.payload, componentKey);
      }
      return state;
    case UIActions.DESTROY_ALL_COMPONENTS_STATE:
      nextState = state;
      (0, _keys2.default)(state).forEach(function (k) {
        nextState = destroyComponentState(nextState, {}, k);
      });
      return nextState;
    default:
      return updateComponentState(state, action, componentKey);
  }
};

var createStore = exports.createStore = function createStore(createStoreFn, props, componentKey, existingState, context) {
  if (!stores[componentKey]) {
    var getWrappedAction = function getWrappedAction(action) {
      var wrappedAction = action;
      if ((typeof action === 'undefined' ? 'undefined' : (0, _typeof3.default)(action)) === 'object') {
        var actionMeta = (0, _assign2.default)({}, action.meta, { reduxFractalTriggerComponent: componentKey });
        wrappedAction = (0, _assign2.default)({}, action, { meta: actionMeta });
      }
      return wrappedAction;
    };
    var localDispatch = function localDispatch(action) {
      var wrappedAction = getWrappedAction(action);
      return context.store.dispatch(wrappedAction);
    };
    var storeResult = createStoreFn(props, existingState, context);
    var storeCleanup = function storeCleanup() {
      return true;
    };
    if (storeResult.store) {
      stores[componentKey] = storeResult.store;
    }
    if (storeResult.cleanup) {
      storeCleanup = storeResult.cleanup;
    }
    if (storeResult.dispatch && storeResult.getState) {
      stores[componentKey] = storeResult;
    }
    stores[componentKey].originalDispatch = stores[componentKey].dispatch;
    stores[componentKey].dispatch = localDispatch;
    return { store: stores[componentKey], cleanup: storeCleanup };
  }
  return { store: stores[componentKey] };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,